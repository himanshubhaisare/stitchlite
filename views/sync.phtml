<?php
/**
 * https://github.com/himanshubhaisare/ohShopify.php forked from cmcdonaldca/ohShopify.php
 */
require_once APP_PATH . '/library/shopify/shopify.php';
require_once APP_PATH . '/models/Product.php';
require_once APP_PATH . '/models/Variant.php';

$shopDomain = $this->config->shopify->shop_domain;
$apiKey     = $this->config->shopify->api_key;
$secret     = $this->config->shopify->secret;
$password   = $this->config->shopify->password;
$token      = "";
$response   = array();

// For private apps (you should never make private apps anyways):
$sc = new ShopifyClient($shopDomain, $token, $apiKey, $password, true);

try  {
    // Get all products from stitchlite db
    $products = Product::find();
    /** @var Product $product */
    foreach($products as $product) {
        // find this product in shopify
        $matchFound = $sc->call('GET', "/admin/products/{$product->getShopifyId()}.json");
        if(!$matchFound) {
            //update product on shopify
            $params = array(
                'product' => array(
                    'title' => $product->getProductName(),
                    'id'    => $product->getShopifyId(),
                    'type'  => $product->getType()
                )
            );
            $response[] = $sc->call('PUT', "/admin/products/{$product->getShopifyId()}.json", $params);
        } else {
            //create product on shopify
            $variants = Variant::find("product_id = '" . $product->getShopifyId() . "'");
            $params = array(
                'product' => array(
                    'title' => $product->getProductName(),
                    'type'  => $product->getType(),
                    'variants' => $variants->toArray()
                )
            );
                $response[] = $sc->call('POST', "/admin/products.json", $params);
        }
    }

    echo '<pre>';
    print_r($response);
    echo '</pre>';

} catch (ShopifyApiException $e) {
    $response = array(
        'response'  => $e->getResponse(),
        'method'    => $e->getMethod(),
        'path'      => $e->getPath(),
        'headers'   => $e->getResponseHeaders(),
        'params'    => $e->getParams()
    );
    echo '<pre>';
    print_r($response);
    echo '</pre>';
} catch (ShopifyCurlException $e) {
    // $e->getMessage() returns value of curl_errno() and $e->getCode() returns value of curl_ error()
    echo "Curl Exception : method {$e->getMessage()}";
}